#lang pie


(claim len (Pi ((E U)) (-> (List E) Nat)))
(define len (lambda (E) (lambda (l) (rec-List l 0
                                      (lambda (e l a) (add1 a)))
                                      )))

(len Atom (:: 'tomato (:: 'salad nil)))

(claim + (-> Nat Nat Nat))
(define + (lambda (a b) (iter-Nat a b (lambda (v) (add1 v)) )))

(+ 5 44)

(claim sum (-> (List Nat) Nat))
(define sum (lambda (l) (rec-List l 0 (lambda (e l a) (+ a e)))))

(sum (:: 1 (:: 2 (:: 3 (:: 4 (:: 5 nil))))))


(claim prepend (Pi ((E U)) (-> (List E) E (List E))))
(define prepend (lambda (E) (lambda (l e) (:: e l))))

(prepend Nat (:: 4 (:: 3 nil)) 7)

(claim append (Pi ((E U)) (-> (List E) E (List E))))
(define append (lambda (E) (lambda (l e) (rec-List l (:: e nil) (lambda (v c a) (:: v a) )))))

(append Nat (:: 4 (:: 3 nil)) 7)

(claim concat (Pi ((E U)) (-> (List E) (List E) (List E))))
(define concat (lambda (E) (lambda (s e) (rec-List s e (lambda (v l a) (:: v a)
                                           )))))

(concat Atom (:: 'hello (:: 'world (:: 'how nil))) (:: 'are (:: 'you (:: 'today nil))))

(claim reverse(Pi ((E U)) (-> (List E) (List E))))
(define reverse (lambda (E) (lambda (e) (rec-List e (the (List E) nil) (lambda (v c a) (append E a v))))))

(reverse Atom (:: 'road (:: 'winding (:: 'and (:: 'long (:: 'the nil))))))